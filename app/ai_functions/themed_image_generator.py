import os
import logging
from pathlib import Path
from typing import Dict, Optional
from openai import OpenAI
import requests
from tqdm import tqdm
import colorama
from colorama import Fore, Style

colorama.init()

class ThemedImageGenerator:
    """Generador de sets de im치genes tem치ticas usando IA"""
    
    def __init__(self, api_key: str):
        self.client = OpenAI(api_key=api_key)
        self.logger = logging.getLogger(__name__)
        self._setup_directories()
        self.available_styles = [
            'realista fotogr치fico',
            'ilustraci칩n digital',
            'estilo minimalista',
            'estilo cinematogr치fico',
            'estilo documental'
        ]
    
    def _setup_directories(self) -> None:
        """Crea los directorios necesarios"""
        for directory in ['output', 'temp', 'logs']:
            Path(directory).mkdir(exist_ok=True)
    
    def _enhance_prompt(self, prompt: str) -> str:
        """Mejora el prompt para generar mejores im치genes"""
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": """
                    Mejora el prompt para DALL-E incluyendo:
                    1. Estilo visual espec칤fico
                    2. Composici칩n y encuadre
                    3. Iluminaci칩n y colores
                    4. Detalles t칠cnicos
                    El prompt debe ser claro y detallado.
                    """},
                    {"role": "user", "content": f"Mejora este prompt: {prompt}"}
                ]
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            self.logger.error(f"Error mejorando prompt: {str(e)}")
            return prompt
    
    def _generate_single_image(self, prompt: str) -> Optional[str]:
        """Genera una 칰nica imagen"""
        try:
            response = self.client.images.generate(
                model="dall-e-3",
                prompt=prompt,
                size="1024x1024",
                quality="standard",
                n=1
            )
            
            image_url = response.data[0].url
            img_data = requests.get(image_url).content
            
            output_path = f"temp/generated_image_{os.urandom(4).hex()}.png"
            with open(output_path, 'wb') as f:
                f.write(img_data)
            
            return output_path
            
        except Exception as e:
            self.logger.error(f"Error generando imagen: {str(e)}")
            return None

    def generate_image_set(self, prompt: str, style: str = 'realista fotogr치fico') -> Dict[str, str]:
        """
        Genera un set de 4 im치genes tem치ticas basadas en el prompt
        
        Args:
            prompt: Idea o concepto base
            style: Estilo visual a aplicar
            
        Returns:
            Dict con las rutas de las im치genes generadas
        """
        try:
            self.logger.info(f"{Fore.BLUE}游꿛 Generando set de im치genes tem치ticas...{Style.RESET_ALL}")
            
            variations = [
                ("principal", "imagen principal que capture la esencia central del concepto"),
                ("detalle", "close-up detallado mostrando elementos espec칤ficos y texturas"),
                ("contexto", "vista amplia que muestre el ambiente y contexto completo"),
                ("alternativa", "interpretaci칩n art칤stica o abstracta del concepto")
            ]
            
            results = {}
            with tqdm(total=4, desc="Generando im치genes", colour='cyan') as pbar:
                for variant_name, variant_desc in variations:
                    # Crear y mejorar prompt espec칤fico
                    variant_prompt = f"{prompt} - {variant_desc} - en estilo {style}"
                    enhanced_prompt = self._enhance_prompt(variant_prompt)
                    
                    # Generar imagen
                    image_path = self._generate_single_image(enhanced_prompt)
                    
                    if image_path:
                        # Mover a ubicaci칩n final
                        final_path = f"output/themed_{variant_name}_{os.urandom(4).hex()}.png"
                        os.rename(image_path, final_path)
                        results[variant_name] = final_path
                    
                    pbar.update(1)
            
            return results
            
        except Exception as e:
            self.logger.error(f"Error generando set de im치genes: {str(e)}")
            return {}